/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.3.0 (NJsonSchema v10.1.5.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    moves_Get(): Observable<Move[]> {
        let url_ = this.baseUrl + "/api/Moves";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMoves_Get(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMoves_Get(<any>response_);
                } catch (e) {
                    return <Observable<Move[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Move[]>><any>_observableThrow(response_);
        }));
    }

    protected processMoves_Get(response: HttpResponseBase): Observable<Move[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Move.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Move[]>(<any>null);
    }
}

export class Move implements IMove {
    character?: string | undefined;
    input?: string | undefined;
    hitLevel?: string | undefined;
    damage?: string | undefined;
    startUpFrame?: string | undefined;
    blockFrame?: string | undefined;
    hitFrame?: string | undefined;
    counterHitFrame?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IMove) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.character = _data["character"];
            this.input = _data["input"];
            this.hitLevel = _data["hitLevel"];
            this.damage = _data["damage"];
            this.startUpFrame = _data["startUpFrame"];
            this.blockFrame = _data["blockFrame"];
            this.hitFrame = _data["hitFrame"];
            this.counterHitFrame = _data["counterHitFrame"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): Move {
        data = typeof data === 'object' ? data : {};
        let result = new Move();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["character"] = this.character;
        data["input"] = this.input;
        data["hitLevel"] = this.hitLevel;
        data["damage"] = this.damage;
        data["startUpFrame"] = this.startUpFrame;
        data["blockFrame"] = this.blockFrame;
        data["hitFrame"] = this.hitFrame;
        data["counterHitFrame"] = this.counterHitFrame;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface IMove {
    character?: string | undefined;
    input?: string | undefined;
    hitLevel?: string | undefined;
    damage?: string | undefined;
    startUpFrame?: string | undefined;
    blockFrame?: string | undefined;
    hitFrame?: string | undefined;
    counterHitFrame?: string | undefined;
    notes?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}